系统架构师

Thinking in Java

effective java

UML基础、案例与应用

UML入门提高

软件工匠

设计模式-可复用面向对象软件的基础

重构-改善既有代码的设计

敏捷软件开发-原则、模式、实践

企业应用架构模式


软件工程-实践者的研究方法

软件领导-成功开发软件的指导准则


数据持久层设计：选择一个合适的数据库连接池的开源项目

MVC架构的具体设计：具体实现，恰当的架构

大并发性访问：使用缓存，在数据量达到一定程度时，使用集群技术，优先考虑利用服务器的集群
其实是硬件集群，最后才是应用本身加入集群功能；

超大数据量返回结果：尽量使用分页，优化sql语句，循环处理数据时尽可能公用对象，
只保留关键数据，及时释放内存占用；

超大文件的读取和生成：尽可能快的读取大文件，并进行分析；写入大文件时，如何及时释放内存，
学会适当利用操作系统的命令；

多线程的应用和管理：线程池的管理和监控、线程的启动（定时启动），结束，回收，线程资源的释放；

用户界面可用性设计：平衡速度和可用性，恰当的使用异步和同步技术，展现关键数据位重点

分布式的数据交流和集成：选择恰当的数据交互方式。从最泛滥低效的web service到最实用的文件共享

集群系统管理：如何确保缓存的同步、如何确保对象的唯一性、如何保证各台机器的同步、

复杂业务规则：规则引擎和工作流引擎场景和使用

http://blog.csdn.net/yangbutao/article/details/12242441




